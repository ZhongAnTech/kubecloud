apiVersion: v1
kind: Namespace
metadata:
  name: kubecloud
---
apiVersion: v1
data:
  app.conf: |
    appname = kubecloud
    httpport = 8080
    runmode = dev
    copyrequestbody = true

    [k8s]
    configPath = ./k8sconfig
    domainSuffix = test.za-tech.net
    defaultDepartment = zis
    defaultBizCluster = zis
    timeout = 120
    nodeMgrYamlsPath=./yamls
    resourcelock_namespace = kubecloud
    clusterMode = one
    environment = dev
    syncResourceDisable=false
    syncResourcePeriod=5

    [DB]
    databaseUrl = ***:***@tcp(***:3306)/kubecloud?charset=utf8
    databaseDebug = false
    defaultRowsLimit = 5000

    [log]
    logfile = "log/kubecloud.log"
    perm = 0640
    level = 7
    separate = ["error"]
kind: ConfigMap
metadata:
  name: kubecloud-config
  namespace: kubecloud
---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  labels:
    app: kubecloud
  name: kubecloud
  namespace: kubecloud
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kubecloud
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: kubecloud
      name: kubecloud
      namespace: kubecloud
    spec:
      containers:
        - image: kubecloud
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 5
            initialDelaySeconds: 30
            periodSeconds: 60
            successThreshold: 1
            tcpSocket:
              port: 8080
            timeoutSeconds: 2
          name: kubecloud
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 10
          resources:
            requests:
              cpu: "1"
              memory: 1Gi
          securityContext:
            privileged: false
          volumeMounts:
            - mountPath: /kubecloud/conf
              name: kubecloud-config
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      volumes:
        - configMap:
            name: kubecloud-config
          name: kubecloud-config
status: {}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: kubecloud
  name: svc-kubecloud
  namespace: kubecloud
spec:
  ports:
    - name: http-8080-8080
      port: 8080
      protocol: TCP
      targetPort: 8080
  selector:
    app: kubecloud
  sessionAffinity: ClientIP
  type: ClusterIP
status:
  loadBalancer: {}