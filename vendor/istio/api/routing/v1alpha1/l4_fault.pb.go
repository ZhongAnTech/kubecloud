// Code generated by protoc-gen-go. DO NOT EDIT.
// source: routing/v1alpha1/l4_fault.proto

package istio_routing_v1alpha1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf1 "github.com/golang/protobuf/ptypes/duration"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// (-- Faults can be injected into the connections from downstream by the
// Envoy, for testing the failure recovery capabilities of downstream
// services.  Faults include aborting the connection from downstream
// service, delaying proxying of connection to the destination
// service, and throttling the bandwidth of the connection (either
// end). Bandwidth throttling for failure testing should not be confused
// with the rate limiting policy enforcement provided by the Mixer
// component. L4 fault injection is not supported at the moment. --)
type L4FaultInjection struct {
	// Unlike Http services, we have very little context for raw Tcp|Udp
	// connections. We could throttle bandwidth of the connections (slow down
	// the connection) and/or abruptly reset (terminate) the Tcp connection
	// after it has been established.
	// We first throttle (if set) and then terminate the connection.
	Throttle  *L4FaultInjection_Throttle  `protobuf:"bytes,1,opt,name=throttle" json:"throttle,omitempty"`
	Terminate *L4FaultInjection_Terminate `protobuf:"bytes,2,opt,name=terminate" json:"terminate,omitempty"`
}

func (m *L4FaultInjection) Reset()                    { *m = L4FaultInjection{} }
func (m *L4FaultInjection) String() string            { return proto.CompactTextString(m) }
func (*L4FaultInjection) ProtoMessage()               {}
func (*L4FaultInjection) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *L4FaultInjection) GetThrottle() *L4FaultInjection_Throttle {
	if m != nil {
		return m.Throttle
	}
	return nil
}

func (m *L4FaultInjection) GetTerminate() *L4FaultInjection_Terminate {
	if m != nil {
		return m.Terminate
	}
	return nil
}

// Bandwidth throttling for Tcp and Udp connections
type L4FaultInjection_Throttle struct {
	// percentage of connections to throttle.
	Percent float32 `protobuf:"fixed32,1,opt,name=percent" json:"percent,omitempty"`
	// bandwidth limit in "bits" per second between downstream and Envoy
	DownstreamLimitBps int64 `protobuf:"varint,2,opt,name=downstream_limit_bps,json=downstreamLimitBps" json:"downstream_limit_bps,omitempty"`
	// bandwidth limits in "bits" per second between Envoy and upstream
	UpstreamLimitBps int64 `protobuf:"varint,3,opt,name=upstream_limit_bps,json=upstreamLimitBps" json:"upstream_limit_bps,omitempty"`
	// Types that are valid to be assigned to ThrottleAfter:
	//	*L4FaultInjection_Throttle_ThrottleAfterPeriod
	//	*L4FaultInjection_Throttle_ThrottleAfterBytes
	ThrottleAfter isL4FaultInjection_Throttle_ThrottleAfter `protobuf_oneof:"throttle_after"`
	// Stop throttling after the given duration. If not set, the connection
	// will be throttled for its lifetime.
	ThrottleForPeriod *google_protobuf1.Duration `protobuf:"bytes,6,opt,name=throttle_for_period,json=throttleForPeriod" json:"throttle_for_period,omitempty"`
}

func (m *L4FaultInjection_Throttle) Reset()                    { *m = L4FaultInjection_Throttle{} }
func (m *L4FaultInjection_Throttle) String() string            { return proto.CompactTextString(m) }
func (*L4FaultInjection_Throttle) ProtoMessage()               {}
func (*L4FaultInjection_Throttle) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0, 0} }

type isL4FaultInjection_Throttle_ThrottleAfter interface {
	isL4FaultInjection_Throttle_ThrottleAfter()
}

type L4FaultInjection_Throttle_ThrottleAfterPeriod struct {
	ThrottleAfterPeriod *google_protobuf1.Duration `protobuf:"bytes,4,opt,name=throttle_after_period,json=throttleAfterPeriod,oneof"`
}
type L4FaultInjection_Throttle_ThrottleAfterBytes struct {
	ThrottleAfterBytes float64 `protobuf:"fixed64,5,opt,name=throttle_after_bytes,json=throttleAfterBytes,oneof"`
}

func (*L4FaultInjection_Throttle_ThrottleAfterPeriod) isL4FaultInjection_Throttle_ThrottleAfter() {}
func (*L4FaultInjection_Throttle_ThrottleAfterBytes) isL4FaultInjection_Throttle_ThrottleAfter()  {}

func (m *L4FaultInjection_Throttle) GetThrottleAfter() isL4FaultInjection_Throttle_ThrottleAfter {
	if m != nil {
		return m.ThrottleAfter
	}
	return nil
}

func (m *L4FaultInjection_Throttle) GetPercent() float32 {
	if m != nil {
		return m.Percent
	}
	return 0
}

func (m *L4FaultInjection_Throttle) GetDownstreamLimitBps() int64 {
	if m != nil {
		return m.DownstreamLimitBps
	}
	return 0
}

func (m *L4FaultInjection_Throttle) GetUpstreamLimitBps() int64 {
	if m != nil {
		return m.UpstreamLimitBps
	}
	return 0
}

func (m *L4FaultInjection_Throttle) GetThrottleAfterPeriod() *google_protobuf1.Duration {
	if x, ok := m.GetThrottleAfter().(*L4FaultInjection_Throttle_ThrottleAfterPeriod); ok {
		return x.ThrottleAfterPeriod
	}
	return nil
}

func (m *L4FaultInjection_Throttle) GetThrottleAfterBytes() float64 {
	if x, ok := m.GetThrottleAfter().(*L4FaultInjection_Throttle_ThrottleAfterBytes); ok {
		return x.ThrottleAfterBytes
	}
	return 0
}

func (m *L4FaultInjection_Throttle) GetThrottleForPeriod() *google_protobuf1.Duration {
	if m != nil {
		return m.ThrottleForPeriod
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*L4FaultInjection_Throttle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _L4FaultInjection_Throttle_OneofMarshaler, _L4FaultInjection_Throttle_OneofUnmarshaler, _L4FaultInjection_Throttle_OneofSizer, []interface{}{
		(*L4FaultInjection_Throttle_ThrottleAfterPeriod)(nil),
		(*L4FaultInjection_Throttle_ThrottleAfterBytes)(nil),
	}
}

func _L4FaultInjection_Throttle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*L4FaultInjection_Throttle)
	// throttle_after
	switch x := m.ThrottleAfter.(type) {
	case *L4FaultInjection_Throttle_ThrottleAfterPeriod:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ThrottleAfterPeriod); err != nil {
			return err
		}
	case *L4FaultInjection_Throttle_ThrottleAfterBytes:
		b.EncodeVarint(5<<3 | proto.WireFixed64)
		b.EncodeFixed64(math.Float64bits(x.ThrottleAfterBytes))
	case nil:
	default:
		return fmt.Errorf("L4FaultInjection_Throttle.ThrottleAfter has unexpected type %T", x)
	}
	return nil
}

func _L4FaultInjection_Throttle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*L4FaultInjection_Throttle)
	switch tag {
	case 4: // throttle_after.throttle_after_period
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf1.Duration)
		err := b.DecodeMessage(msg)
		m.ThrottleAfter = &L4FaultInjection_Throttle_ThrottleAfterPeriod{msg}
		return true, err
	case 5: // throttle_after.throttle_after_bytes
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.ThrottleAfter = &L4FaultInjection_Throttle_ThrottleAfterBytes{math.Float64frombits(x)}
		return true, err
	default:
		return false, nil
	}
}

func _L4FaultInjection_Throttle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*L4FaultInjection_Throttle)
	// throttle_after
	switch x := m.ThrottleAfter.(type) {
	case *L4FaultInjection_Throttle_ThrottleAfterPeriod:
		s := proto.Size(x.ThrottleAfterPeriod)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *L4FaultInjection_Throttle_ThrottleAfterBytes:
		n += proto.SizeVarint(5<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Abruptly reset (terminate) the Tcp connection after it has been
// established, emulating remote server crash or link failure.
type L4FaultInjection_Terminate struct {
	// percentage of established Tcp connections to be terminated/reset
	Percent float32 `protobuf:"fixed32,1,opt,name=percent" json:"percent,omitempty"`
	// TODO: see if it makes sense to create a generic Duration type to
	// express time interval related configs.
	TerminateAfterPeriod *google_protobuf1.Duration `protobuf:"bytes,2,opt,name=terminate_after_period,json=terminateAfterPeriod" json:"terminate_after_period,omitempty"`
}

func (m *L4FaultInjection_Terminate) Reset()                    { *m = L4FaultInjection_Terminate{} }
func (m *L4FaultInjection_Terminate) String() string            { return proto.CompactTextString(m) }
func (*L4FaultInjection_Terminate) ProtoMessage()               {}
func (*L4FaultInjection_Terminate) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0, 1} }

func (m *L4FaultInjection_Terminate) GetPercent() float32 {
	if m != nil {
		return m.Percent
	}
	return 0
}

func (m *L4FaultInjection_Terminate) GetTerminateAfterPeriod() *google_protobuf1.Duration {
	if m != nil {
		return m.TerminateAfterPeriod
	}
	return nil
}

func init() {
	proto.RegisterType((*L4FaultInjection)(nil), "istio.routing.v1alpha1.L4FaultInjection")
	proto.RegisterType((*L4FaultInjection_Throttle)(nil), "istio.routing.v1alpha1.L4FaultInjection.Throttle")
	proto.RegisterType((*L4FaultInjection_Terminate)(nil), "istio.routing.v1alpha1.L4FaultInjection.Terminate")
}

func init() { proto.RegisterFile("routing/v1alpha1/l4_fault.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 362 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xd1, 0x4e, 0xe2, 0x40,
	0x18, 0x85, 0x69, 0x59, 0x58, 0xf8, 0x37, 0xd9, 0xb0, 0xb3, 0x48, 0x2a, 0x17, 0x4a, 0xbc, 0xe2,
	0xc2, 0x4c, 0x05, 0x79, 0x01, 0x89, 0x21, 0x90, 0x60, 0x20, 0x8d, 0xf7, 0x4d, 0x0b, 0x53, 0x18,
	0x53, 0x3a, 0xcd, 0xf4, 0x2f, 0xc6, 0xf7, 0xf0, 0x19, 0x7d, 0x0e, 0xd3, 0xa1, 0x53, 0x04, 0x8d,
	0x78, 0xd9, 0x9c, 0xf3, 0x9d, 0xff, 0xf4, 0x0c, 0x5c, 0x4a, 0x91, 0x22, 0x8f, 0x56, 0xf6, 0xb6,
	0xe7, 0x85, 0xf1, 0xda, 0xeb, 0xd9, 0xe1, 0xc0, 0x0d, 0xbc, 0x34, 0x44, 0x1a, 0x4b, 0x81, 0x82,
	0xb4, 0x78, 0x82, 0x5c, 0xd0, 0xdc, 0x46, 0xb5, 0xad, 0x7d, 0xb1, 0x12, 0x62, 0x15, 0x32, 0x5b,
	0xb9, 0xfc, 0x34, 0xb0, 0x97, 0xa9, 0xf4, 0x90, 0x8b, 0x68, 0xc7, 0x5d, 0xbd, 0x56, 0xa0, 0x31,
	0x1d, 0x8c, 0xb2, 0xa4, 0x49, 0xf4, 0xc4, 0x16, 0x99, 0x44, 0x1e, 0xa0, 0x86, 0x6b, 0x29, 0x10,
	0x43, 0x66, 0x19, 0x1d, 0xa3, 0xfb, 0xa7, 0xdf, 0xa3, 0x5f, 0xe7, 0xd3, 0x63, 0x96, 0x3e, 0xe6,
	0xa0, 0x53, 0x44, 0x90, 0x39, 0xd4, 0x91, 0xc9, 0x0d, 0x8f, 0x3c, 0x64, 0x96, 0xa9, 0xf2, 0xfa,
	0x3f, 0xcf, 0xd3, 0xa4, 0xb3, 0x0f, 0x69, 0xbf, 0x99, 0x50, 0xd3, 0x87, 0x88, 0x05, 0xbf, 0x63,
	0x26, 0x17, 0x2c, 0x42, 0x55, 0xd6, 0x74, 0xf4, 0x27, 0xb9, 0x81, 0xe6, 0x52, 0x3c, 0x47, 0x09,
	0x4a, 0xe6, 0x6d, 0xdc, 0x90, 0x6f, 0x38, 0xba, 0x7e, 0x9c, 0xa8, 0x0e, 0x65, 0x87, 0xec, 0xb5,
	0x69, 0x26, 0x0d, 0xe3, 0x84, 0x5c, 0x03, 0x49, 0xe3, 0x4f, 0xfe, 0xb2, 0xf2, 0x37, 0xb4, 0x52,
	0xb8, 0x67, 0x70, 0xa6, 0x7f, 0xd2, 0xf5, 0x02, 0x64, 0xd2, 0x8d, 0x99, 0xe4, 0x62, 0x69, 0xfd,
	0x52, 0x3f, 0x79, 0x4e, 0x77, 0xe3, 0x53, 0x3d, 0x3e, 0xbd, 0xcf, 0xc7, 0x1f, 0x97, 0x9c, 0xff,
	0x9a, 0xbc, 0xcb, 0xc0, 0xb9, 0xe2, 0x48, 0x1f, 0x9a, 0x47, 0x81, 0xfe, 0x0b, 0xb2, 0xc4, 0xaa,
	0x74, 0x8c, 0xae, 0x31, 0x2e, 0x39, 0xe4, 0x00, 0x1a, 0x66, 0x1a, 0x99, 0x40, 0x11, 0xe5, 0x06,
	0xa2, 0xa8, 0x50, 0x3d, 0x51, 0xc1, 0xf9, 0xa7, 0xa9, 0x91, 0xc8, 0xcf, 0x0f, 0x1b, 0xf0, 0xf7,
	0xf0, 0x7c, 0x7b, 0x0b, 0xf5, 0xe2, 0x01, 0xbe, 0x19, 0x7a, 0x06, 0xad, 0xe2, 0x71, 0x0e, 0x97,
	0x30, 0x4f, 0xd5, 0x68, 0x16, 0xe0, 0x87, 0x21, 0xfc, 0xaa, 0x32, 0xde, 0xbe, 0x07, 0x00, 0x00,
	0xff, 0xff, 0x7a, 0xe9, 0xdd, 0x3b, 0xf8, 0x02, 0x00, 0x00,
}
