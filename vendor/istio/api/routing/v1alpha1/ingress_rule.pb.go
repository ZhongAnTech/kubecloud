// Code generated by protoc-gen-go. DO NOT EDIT.
// source: routing/v1alpha1/ingress_rule.proto

package istio_routing_v1alpha1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Ingress rules are routing rules applied to the ingress proxy pool. The
// ingress proxes serve as the receiving edge proxy for the entire mesh, but
// can also be addressed from inside the mesh.  Each ingress rule defines a
// destination service and port. Rules that do not resolve to a service or a
// port in the mesh should be ignored.
//
// The routing rules for the destination service are applied at the ingress
// proxy. That means the routing rule match conditions are composed and its
// actions are enforced. The traffic splitting for the destination service is
// also effective.
//
// WARNING: This API is experimental and under active development
type IngressRule struct {
	// REQUIRED: Port on which the ingress proxy listens and applies the rule.
	Port int32 `protobuf:"varint,1,opt,name=port" json:"port,omitempty"`
	// Optional TLS secret path to apply server-side TLS context on the port.
	// It is up to the underlying secret store to interpret the path to the secret.
	TlsSecret string `protobuf:"bytes,2,opt,name=tls_secret,json=tlsSecret" json:"tls_secret,omitempty"`
	// RECOMMENDED. Precedence is used to disambiguate the order of application
	// of rules. A higher number takes priority. If not specified, the value is
	// assumed to be 0.  The order of application for rules with the same
	// precedence is unspecified.
	Precedence int32 `protobuf:"varint,3,opt,name=precedence" json:"precedence,omitempty"`
	// Match conditions to be satisfied for the ingress rule to be
	// activated.
	Match *MatchCondition `protobuf:"bytes,4,opt,name=match" json:"match,omitempty"`
	// REQUIRED: Destination uniquely identifies the destination service.
	//
	// *Note:* The ingress rule destination specification represents all version
	// of the service and therefore the IstioService's labels field MUST be empty.
	//
	Destination *IstioService `protobuf:"bytes,5,opt,name=destination" json:"destination,omitempty"`
	// REQUIRED: Destination port identifies a port on the destination service for routing.
	//
	// Types that are valid to be assigned to DestinationServicePort:
	//	*IngressRule_DestinationPort
	//	*IngressRule_DestinationPortName
	DestinationServicePort isIngressRule_DestinationServicePort `protobuf_oneof:"destination_service_port"`
}

func (m *IngressRule) Reset()                    { *m = IngressRule{} }
func (m *IngressRule) String() string            { return proto.CompactTextString(m) }
func (*IngressRule) ProtoMessage()               {}
func (*IngressRule) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

type isIngressRule_DestinationServicePort interface {
	isIngressRule_DestinationServicePort()
}

type IngressRule_DestinationPort struct {
	DestinationPort int32 `protobuf:"varint,6,opt,name=destination_port,json=destinationPort,oneof"`
}
type IngressRule_DestinationPortName struct {
	DestinationPortName string `protobuf:"bytes,7,opt,name=destination_port_name,json=destinationPortName,oneof"`
}

func (*IngressRule_DestinationPort) isIngressRule_DestinationServicePort()     {}
func (*IngressRule_DestinationPortName) isIngressRule_DestinationServicePort() {}

func (m *IngressRule) GetDestinationServicePort() isIngressRule_DestinationServicePort {
	if m != nil {
		return m.DestinationServicePort
	}
	return nil
}

func (m *IngressRule) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *IngressRule) GetTlsSecret() string {
	if m != nil {
		return m.TlsSecret
	}
	return ""
}

func (m *IngressRule) GetPrecedence() int32 {
	if m != nil {
		return m.Precedence
	}
	return 0
}

func (m *IngressRule) GetMatch() *MatchCondition {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *IngressRule) GetDestination() *IstioService {
	if m != nil {
		return m.Destination
	}
	return nil
}

func (m *IngressRule) GetDestinationPort() int32 {
	if x, ok := m.GetDestinationServicePort().(*IngressRule_DestinationPort); ok {
		return x.DestinationPort
	}
	return 0
}

func (m *IngressRule) GetDestinationPortName() string {
	if x, ok := m.GetDestinationServicePort().(*IngressRule_DestinationPortName); ok {
		return x.DestinationPortName
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*IngressRule) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _IngressRule_OneofMarshaler, _IngressRule_OneofUnmarshaler, _IngressRule_OneofSizer, []interface{}{
		(*IngressRule_DestinationPort)(nil),
		(*IngressRule_DestinationPortName)(nil),
	}
}

func _IngressRule_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*IngressRule)
	// destination_service_port
	switch x := m.DestinationServicePort.(type) {
	case *IngressRule_DestinationPort:
		b.EncodeVarint(6<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.DestinationPort))
	case *IngressRule_DestinationPortName:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.DestinationPortName)
	case nil:
	default:
		return fmt.Errorf("IngressRule.DestinationServicePort has unexpected type %T", x)
	}
	return nil
}

func _IngressRule_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*IngressRule)
	switch tag {
	case 6: // destination_service_port.destination_port
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.DestinationServicePort = &IngressRule_DestinationPort{int32(x)}
		return true, err
	case 7: // destination_service_port.destination_port_name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.DestinationServicePort = &IngressRule_DestinationPortName{x}
		return true, err
	default:
		return false, nil
	}
}

func _IngressRule_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*IngressRule)
	// destination_service_port
	switch x := m.DestinationServicePort.(type) {
	case *IngressRule_DestinationPort:
		n += proto.SizeVarint(6<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.DestinationPort))
	case *IngressRule_DestinationPortName:
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.DestinationPortName)))
		n += len(x.DestinationPortName)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*IngressRule)(nil), "istio.routing.v1alpha1.IngressRule")
}

func init() { proto.RegisterFile("routing/v1alpha1/ingress_rule.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 279 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0xdf, 0x4a, 0xc3, 0x30,
	0x18, 0xc5, 0xd7, 0xb9, 0x4e, 0xf6, 0xf5, 0x42, 0x89, 0x28, 0x61, 0xa0, 0xd4, 0x3f, 0x48, 0x41,
	0xe8, 0x98, 0x7a, 0xe9, 0x95, 0x82, 0x6c, 0x17, 0x8a, 0x64, 0x0f, 0x50, 0x62, 0xfb, 0xb1, 0x05,
	0xda, 0xa4, 0x24, 0xe9, 0xde, 0xd8, 0xf7, 0x90, 0xa4, 0x0a, 0x61, 0xba, 0xbb, 0xe4, 0xe4, 0xfc,
	0x0e, 0xe7, 0x04, 0xae, 0xb5, 0xea, 0xac, 0x90, 0xeb, 0xd9, 0x76, 0xce, 0xeb, 0x76, 0xc3, 0xe7,
	0x33, 0x21, 0xd7, 0x1a, 0x8d, 0x29, 0x74, 0x57, 0x63, 0xde, 0x6a, 0x65, 0x15, 0x39, 0x13, 0xc6,
	0x0a, 0x95, 0xff, 0x58, 0xf3, 0x5f, 0xeb, 0xf4, 0xf2, 0x0f, 0xec, 0x04, 0x0c, 0xd0, 0xab, 0xaf,
	0x21, 0x24, 0xcb, 0x3e, 0x91, 0x75, 0x35, 0x12, 0x02, 0xa3, 0x56, 0x69, 0x4b, 0xa3, 0x34, 0xca,
	0x62, 0xe6, 0xcf, 0xe4, 0x1c, 0xc0, 0xd6, 0xa6, 0x30, 0x58, 0x6a, 0xb4, 0x74, 0x98, 0x46, 0xd9,
	0x84, 0x4d, 0x6c, 0x6d, 0x56, 0x5e, 0x20, 0x17, 0x00, 0xad, 0xc6, 0x12, 0x2b, 0x94, 0x25, 0xd2,
	0x03, 0x0f, 0x06, 0x0a, 0x79, 0x82, 0xb8, 0xe1, 0xb6, 0xdc, 0xd0, 0x51, 0x1a, 0x65, 0xc9, 0xfd,
	0x6d, 0xfe, 0x7f, 0xdb, 0xfc, 0xcd, 0x99, 0x5e, 0x94, 0xac, 0x84, 0x15, 0x4a, 0xb2, 0x1e, 0x22,
	0xaf, 0x90, 0x54, 0x68, 0xac, 0x90, 0xdc, 0xa9, 0x34, 0xf6, 0x19, 0x37, 0xfb, 0x32, 0x96, 0x4e,
	0x5e, 0xa1, 0xde, 0x8a, 0x12, 0x59, 0x08, 0x92, 0x3b, 0x38, 0x0e, 0xae, 0x85, 0x1f, 0x39, 0x76,
	0x5d, 0x17, 0x03, 0x76, 0x14, 0xbc, 0x7c, 0xb8, 0xc5, 0x8f, 0x70, 0xba, 0x6b, 0x2e, 0x24, 0x6f,
	0x90, 0x1e, 0xba, 0xf1, 0x8b, 0x01, 0x3b, 0xd9, 0x21, 0xde, 0x79, 0x83, 0xcf, 0x53, 0xa0, 0x21,
	0x65, 0xfa, 0x1a, 0x9e, 0xfe, 0x1c, 0xfb, 0xef, 0x7e, 0xf8, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x47,
	0xd0, 0x2c, 0x20, 0xd0, 0x01, 0x00, 0x00,
}
