/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen

package v1alpha2

import (
	v1alpha2 "istio/api/routing/v1alpha2"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IngressRuleLister helps list IngressRules.
type IngressRuleLister interface {
	// List lists all IngressRules in the indexer.
	List(selector labels.Selector) (ret []*v1alpha2.IngressRule, err error)
	// IngressRules returns an object that can list and get IngressRules.
	IngressRules(namespace string) IngressRuleNamespaceLister
	IngressRuleListerExpansion
}

// ingressRuleLister implements the IngressRuleLister interface.
type ingressRuleLister struct {
	indexer cache.Indexer
}

// NewIngressRuleLister returns a new IngressRuleLister.
func NewIngressRuleLister(indexer cache.Indexer) IngressRuleLister {
	return &ingressRuleLister{indexer: indexer}
}

// List lists all IngressRules in the indexer.
func (s *ingressRuleLister) List(selector labels.Selector) (ret []*v1alpha2.IngressRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.IngressRule))
	})
	return ret, err
}

// IngressRules returns an object that can list and get IngressRules.
func (s *ingressRuleLister) IngressRules(namespace string) IngressRuleNamespaceLister {
	return ingressRuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IngressRuleNamespaceLister helps list and get IngressRules.
type IngressRuleNamespaceLister interface {
	// List lists all IngressRules in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha2.IngressRule, err error)
	// Get retrieves the IngressRule from the indexer for a given namespace and name.
	Get(name string) (*v1alpha2.IngressRule, error)
	IngressRuleNamespaceListerExpansion
}

// ingressRuleNamespaceLister implements the IngressRuleNamespaceLister
// interface.
type ingressRuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IngressRules in the indexer for a given namespace.
func (s ingressRuleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha2.IngressRule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.IngressRule))
	})
	return ret, err
}

// Get retrieves the IngressRule from the indexer for a given namespace and name.
func (s ingressRuleNamespaceLister) Get(name string) (*v1alpha2.IngressRule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha2.Resource("ingressrule"), name)
	}
	return obj.(*v1alpha2.IngressRule), nil
}
