/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen

package v1alpha2

import (
	v1alpha2 "istio/api/routing/v1alpha2"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DestinationPolicyLister helps list DestinationPolicies.
type DestinationPolicyLister interface {
	// List lists all DestinationPolicies in the indexer.
	List(selector labels.Selector) (ret []*v1alpha2.DestinationPolicy, err error)
	// DestinationPolicies returns an object that can list and get DestinationPolicies.
	DestinationPolicies(namespace string) DestinationPolicyNamespaceLister
	DestinationPolicyListerExpansion
}

// destinationPolicyLister implements the DestinationPolicyLister interface.
type destinationPolicyLister struct {
	indexer cache.Indexer
}

// NewDestinationPolicyLister returns a new DestinationPolicyLister.
func NewDestinationPolicyLister(indexer cache.Indexer) DestinationPolicyLister {
	return &destinationPolicyLister{indexer: indexer}
}

// List lists all DestinationPolicies in the indexer.
func (s *destinationPolicyLister) List(selector labels.Selector) (ret []*v1alpha2.DestinationPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.DestinationPolicy))
	})
	return ret, err
}

// DestinationPolicies returns an object that can list and get DestinationPolicies.
func (s *destinationPolicyLister) DestinationPolicies(namespace string) DestinationPolicyNamespaceLister {
	return destinationPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DestinationPolicyNamespaceLister helps list and get DestinationPolicies.
type DestinationPolicyNamespaceLister interface {
	// List lists all DestinationPolicies in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha2.DestinationPolicy, err error)
	// Get retrieves the DestinationPolicy from the indexer for a given namespace and name.
	Get(name string) (*v1alpha2.DestinationPolicy, error)
	DestinationPolicyNamespaceListerExpansion
}

// destinationPolicyNamespaceLister implements the DestinationPolicyNamespaceLister
// interface.
type destinationPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DestinationPolicies in the indexer for a given namespace.
func (s destinationPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha2.DestinationPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.DestinationPolicy))
	})
	return ret, err
}

// Get retrieves the DestinationPolicy from the indexer for a given namespace and name.
func (s destinationPolicyNamespaceLister) Get(name string) (*v1alpha2.DestinationPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha2.Resource("destinationpolicy"), name)
	}
	return obj.(*v1alpha2.DestinationPolicy), nil
}
