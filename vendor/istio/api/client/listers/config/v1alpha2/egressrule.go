/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen

package v1alpha2

import (
	v1alpha2 "istio/api/routing/v1alpha2"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EgressRuleLister helps list EgressRules.
type EgressRuleLister interface {
	// List lists all EgressRules in the indexer.
	List(selector labels.Selector) (ret []*v1alpha2.EgressRule, err error)
	// EgressRules returns an object that can list and get EgressRules.
	EgressRules(namespace string) EgressRuleNamespaceLister
	EgressRuleListerExpansion
}

// egressRuleLister implements the EgressRuleLister interface.
type egressRuleLister struct {
	indexer cache.Indexer
}

// NewEgressRuleLister returns a new EgressRuleLister.
func NewEgressRuleLister(indexer cache.Indexer) EgressRuleLister {
	return &egressRuleLister{indexer: indexer}
}

// List lists all EgressRules in the indexer.
func (s *egressRuleLister) List(selector labels.Selector) (ret []*v1alpha2.EgressRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.EgressRule))
	})
	return ret, err
}

// EgressRules returns an object that can list and get EgressRules.
func (s *egressRuleLister) EgressRules(namespace string) EgressRuleNamespaceLister {
	return egressRuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EgressRuleNamespaceLister helps list and get EgressRules.
type EgressRuleNamespaceLister interface {
	// List lists all EgressRules in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha2.EgressRule, err error)
	// Get retrieves the EgressRule from the indexer for a given namespace and name.
	Get(name string) (*v1alpha2.EgressRule, error)
	EgressRuleNamespaceListerExpansion
}

// egressRuleNamespaceLister implements the EgressRuleNamespaceLister
// interface.
type egressRuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EgressRules in the indexer for a given namespace.
func (s egressRuleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha2.EgressRule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.EgressRule))
	})
	return ret, err
}

// Get retrieves the EgressRule from the indexer for a given namespace and name.
func (s egressRuleNamespaceLister) Get(name string) (*v1alpha2.EgressRule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha2.Resource("egressrule"), name)
	}
	return obj.(*v1alpha2.EgressRule), nil
}
